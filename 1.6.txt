给你两个整数数组 nums1 和 nums2 ，请你以数组形式返回两数组的交集。返回结果中每个元素出现的次数，应与元素在两个数组中都出现的次数一致（如果出现次数不一致，则考虑取较小值）。可以不考虑输出结果的顺序。

 

示例 1：

输入：nums1 = [1,2,2,1], nums2 = [2,2]
输出：[2,2]
示例 2:

输入：nums1 = [4,9,5], nums2 = [9,4,9,8,4]
输出：[4,9]
 

提示：

1 <= nums1.length, nums2.length <= 1000
0 <= nums1[i], nums2[i] <= 1000




my_answer(过不了，原因为没有申请动态内存，请大佬指正):

/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int* intersect(int* nums1, int nums1Size, int* nums2, int nums2Size, int* returnSize){
    int t=nums1Size;
    if(nums2Size<nums1Size)
    {
        t=nums2Size;
    }
	//创建两个哈希表来储存每个数组中各个数字出现的次数
    int hash1[1001]={0};
    int hash2[1001]={0};
    for(int i=0;i<nums1Size;i++)
    {
        hash1[nums1[i]]++;
    }
    for(int i=0;i<nums2Size;i++)
    {
        hash2[nums2[i]]++;
    }
    int a=0,b=0,c=0;
	/遍历比较两个哈希表中相同数字出现的次数
    for(int i=0;i<t;i++)
    {
		//如果相等且不为0，则用遍历出现次数，将哈希表下标（也就是重复出现的数字）赋值给相应的数组元素
        if(hash1[i] == hash2[i] && hash1[i] != 0 )
        {
            for(a=0;a<hash1[i];a++)
            {
                returnSize[a]=i;

            }
        }
		//如果都出现过且出现次数不同，取较小者遍历，将哈希表下标赋值给相应的数组元素
        if(hash1[i]>hash2[i] && hash2[i] !=0)
        {
            for(b=0;a<hash2[i];b++)
            {
                returnSize[a]=i;
            }
        }
        if(hash2[i]>hash1[i] && hash1[i]>0)
        {
            for(c=0;a<hash1[i];c++)
            {
                returnSize[a]=i;
            }
        }
    }
	//返回相应的数组
    return returnSize;
}


answer2.0：


/**
 * Note: The returned array must be malloced, assume caller calls free().
 */
int cmp(const void *a,const void *b)
{
    return *(int *)a - *(int *)b;
}
int* intersect(int* nums1, int nums1Size, int* nums2, int nums2Size, int* returnSize){
    qsort(nums1,nums1Size,sizeof(nums1[0]),cmp);
    qsort(nums2,nums2Size,sizeof(nums2[0]),cmp);
    int i=0,j=0;
    int *ret = (int * ) malloc(1000 * sizeof(int));//申请动态内存。
    if(ret==NULL)
    {
        *returnSize=0;
        return ret;
    }
    int count=0;
    for(i=0,j=0;i<nums1Size && j< nums2Size;)
    {
        if(nums1[i]==nums2[j])
        {
            ret[count]=nums1[i];
            count++;//count一定要再第一个，否则会少计数一次
            i++;
            j++;
            continue;//！！！！！这里一定要注意！！！！
        }
        if(nums1[i]>nums2[j])
        {
            j++;
        }
        else
        {
            i++;
        }
    }
    *returnSize =count;//returnSize的作用仅为告诉判断系统数组的大小。
    return ret;
}