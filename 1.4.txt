给你一个整数数组 nums 。如果任一值在数组中出现 至少两次 ，返回 true ；如果数组中每个元素互不相同，返回 false 。
 

示例 1：

输入：nums = [1,2,3,1]
输出：true
示例 2：

输入：nums = [1,2,3,4]
输出：false
示例 3：

输入：nums = [1,1,1,3,3,4,3,2,4,2]
输出：true
 

提示：

1 <= nums.length <= 105
-109 <= nums[i] <= 109



My_answer (提示超出时间，原因是双重for循环，执行次数是n^2):
bool containsDuplicate(int* nums, int numsSize){
    int i=0,j=i+1,a=0;
    if(numsSize<=1)
    {
        a=0;
    }
    for(i=0;i<numsSize;i++){
        for(j=i+1;j<numsSize;j++){
            if(nums[i]==nums[j]){
                a=1;
                break;
            }
        }
        if(a==1){
            break;
        }
    }
    if(a==1){
        return true;
    }
    else{
        return false;
    }
}



使用哈希表查找，将O（n^2）转化为线性的O（n）：
//哈希函数讲解：https://www.bilibili.com/video/BV1cX4y1K7Tk?spm_id_from=333.337.search-card.all.click
//但不知道为什么还是过不去。
void create_hash(int a[], int n, int table[])
{
    for (int i = 0; i < n; i++)
    {
        table[a[i]]++;
    }
}
int main()
{
    int nums[4] = { 1,2,3,1 };
    int numsSize = 4;
    int table[10] = { 0 };
    create_hash(nums, numsSize, table);
    for (int i = 0; i < numsSize; i++)
    {
        if (table[i] > 1)
        {
            printf("%d", i);
        }
    }
    return 0;
}





使用排序（一定要注意数组边界查找问题）：


//排序函数
int cmp(const void *a,const void *b)
{
    return (*(int*)a - *(int*)b);
}
//
bool containsDuplicate(int* nums, int numsSize){
    int a=0;
    if(numsSize<=1)
    {
        a=0;
    }
    //排序
    qsort(nums,numsSize,sizeof(nums[0]),cmp);
    //两个相邻的相等就直接跳出循环
    for(int i=0;i<numsSize-1;i++)
	
	//i<numsSize-1!!!!!!!!!!!!,如果不-1，则在查找最后一组时会超出数组范围。
	
    {
        if(nums[i]==nums[i+1])
        {
            return true;
            break;
        }
    }
    return false;
}

